一、Servlet简介

TCP/IP协议：客户端-服务器（Client-Server）模型
当多台计算机需要相互通信传输数据时，他们必须遵循相同的协议（Protocol），协议可以认为是通信双⽅遵循的⼀种约定——在此基础之上，双⽅才能够相互理解通信的内容。

一个完整的URL各部分的含义
{协议}：//{主机名}:{端口号}/{路径}/{文件}?{参数}

常用的方法有: GET, POST, PUT, DELETE, OPTIONS, HEAD。

状态码
状态码是由3位数组成，第一个数字定义了响应的类别，且有五种可能取值:

1xx 【消息】服务器收到请求，需要请求者继续执行操作
2xx 【成功】请求已成功被服务器接收、理解、并接受。
3xx 【重定向】客户端需要采取进一步的操作以完成请求
4xx 【客户端请求错误】客户端错误，请求包含语法错误或无法完成请求
5xx 【服务器错误】服务器在处理请求的过程中发生了错误
平时遇到比较常见的状态码有:200, 204, 301, 302, 304, 400, 401, 403, 404, 422, 500等：

200 OK //客户端请求成功
304 Not Modified // 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源
400 Bad Request //客户端请求有语法错误，不能被服务器所理解
401 Unauthorized // 当前请求要求用户的身份认证
403 Forbidden // 服务器理解请求客户端的请求，但是拒绝执行此请求
404 Not Found //请求资源不存在，输入了错误的URL
500 Internal Server Error //服务器发生不可预期的错误
503 Server Unavailable // 由于超载或系统维护，服务器暂时的无法处理客户端的请求。一段时间后可能恢复正常

用户点击一个链接后发生的什么？  
1.浏览器分析链接所指的页面的URL；  
2.浏览器向域名系统DNS请求解析URL的IP地址。  
3.浏览器和服务器建立TCP连接，  
4.浏览器发出取文件的命令：GET
 (web sever 和客户端通信http，摘出路径和参数)（helper app处理数据，然后扔给web sever）
5.服务器给出相应，把文件index.html发给浏览器。  
6.浏览器解析渲染页面   
7.TCP断开连接

静态页面：  
conf文件夹里web.xml里false改为true  
静态的在webapps文件夹ROOT里。





tomcat跑在java虚拟机上（jvm）

127.0.0.1 localhost本机

main()从tomcat开始，在tomcat上面

Tomcat 分web sever （和客户端通信http，摘出路径和参数，只是取出来，如果是静态的就自己处理了）和 web （servlet） container（管理servlet，将死的变活，交给class管理。URL绑定了对应的class）

web container创建request和response对象，找出并扔给对应的servlet，读取request，修改response对象，然后扔给container，container再交给sever（不是对象）。

maven和pom.xml相连，



@WebServlet("/add"),绑定URL，和下面代码功能一样。
<servlet>
    <servlet-name>1stApp</servlet-name>
    <servlet-class>club.banyuan.WebAPP</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>1stApp</servlet-name>
    <url-pattern>/demo</url-pattern>
  </servlet-mapping>
缺点：
1.找的时候难找
2.如果想改名，需要重新编译，写在xml里，不需要重新编译，需要部署（部署和编译不是一回事）

servlet处理数据，把得到的数据扔给jsp，jsp生成html。（jsp是一个servlet）

mvc模型（过时了，没有v，及jsp）
（图片见图片mcv.jpg）


Controller：到model找数据，控制怎么走，
View：加工数据，生成html文档
Model：处理数据





使用Maven创建和部署Servlet项目:

创建项目:mvn archetype:generate(在一个空的文件目录下)
终端下操作：(创建部署过程.jpg)

生成成功在idea打开，
新建java.club.banyuan
将java包设为sources root（图见2.jpg）


POM加入 servlet 依赖
<dependency>
  <groupId>javax.servlet</groupId>
  <artifactId>javax.servlet-api</artifactId>
  <version>4.0.1</version>
  <scope>provided</scope>
</dependency>

POM指定 JRE 版本
<plugin>
    <artifactId>maven-compiler-plugin</artifactId>
    <configuration>
	<source>11</source>
	<target>11</target>
    </configuration>
</plugin>

在项目的POM文件中配置Tomcat的插件pom.xml
<plugin>
    <groupId>org.apache.tomcat.maven</groupId>
    <artifactId>tomcat7-maven-plugin</artifactId>
    <version>2.2</version>
    <configuration>
	<url>http://localhost:8080/manager/text</url>
	<server>TomcatServer</server>
	<path>/myapp</path>
    </configuration>
</plugin>

在DD文件中(web.xml)配置servlet映射关系
一、第一种方法：
<servlet>
    <servlet-name>my-1st-servlet</servlet-name>
    <servlet-class>club.banyuan.ServletDemo</servlet-class>
</servlet>
<servlet-mapping>
    <servlet-name>my-1st-servlet</servlet-name>
    <url-pattern>/aaa</url-pattern>
</servlet-mapping>
二、第二种方法：直接注释，@WebServlet("/名字")即绑定


